// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: GrpcTxEvent.proto

package sagagrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GrpcTxEvent struct {
	Timestamp                int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	GlobalTxId               string   `protobuf:"bytes,2,opt,name=globalTxId,proto3" json:"globalTxId,omitempty"`
	LocalTxId                string   `protobuf:"bytes,3,opt,name=localTxId,proto3" json:"localTxId,omitempty"`
	ParentTxId               string   `protobuf:"bytes,4,opt,name=parentTxId,proto3" json:"parentTxId,omitempty"`
	Type                     string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	CompensationMethod       string   `protobuf:"bytes,6,opt,name=compensationMethod,proto3" json:"compensationMethod,omitempty"`
	Payloads                 []byte   `protobuf:"bytes,7,opt,name=payloads,proto3" json:"payloads,omitempty"`
	ServiceName              string   `protobuf:"bytes,8,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	InstanceId               string   `protobuf:"bytes,9,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Timeout                  int32    `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ForwardTimeout           int32    `protobuf:"varint,11,opt,name=forwardTimeout,proto3" json:"forwardTimeout,omitempty"`
	ForwardRetries           int32    `protobuf:"varint,12,opt,name=forwardRetries,proto3" json:"forwardRetries,omitempty"`
	ReverseRetries           int32    `protobuf:"varint,13,opt,name=reverseRetries,proto3" json:"reverseRetries,omitempty"`
	ReverseTimeout           int32    `protobuf:"varint,14,opt,name=reverseTimeout,proto3" json:"reverseTimeout,omitempty"`
	RetryDelayInMilliseconds int32    `protobuf:"varint,15,opt,name=retryDelayInMilliseconds,proto3" json:"retryDelayInMilliseconds,omitempty"`
	RetryMethod              string   `protobuf:"bytes,16,opt,name=retryMethod,proto3" json:"retryMethod,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *GrpcTxEvent) Reset()         { *m = GrpcTxEvent{} }
func (m *GrpcTxEvent) String() string { return proto.CompactTextString(m) }
func (*GrpcTxEvent) ProtoMessage()    {}
func (*GrpcTxEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a03169feeaf20564, []int{0}
}
func (m *GrpcTxEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrpcTxEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrpcTxEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrpcTxEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcTxEvent.Merge(m, src)
}
func (m *GrpcTxEvent) XXX_Size() int {
	return m.Size()
}
func (m *GrpcTxEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcTxEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcTxEvent proto.InternalMessageInfo

func (m *GrpcTxEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GrpcTxEvent) GetGlobalTxId() string {
	if m != nil {
		return m.GlobalTxId
	}
	return ""
}

func (m *GrpcTxEvent) GetLocalTxId() string {
	if m != nil {
		return m.LocalTxId
	}
	return ""
}

func (m *GrpcTxEvent) GetParentTxId() string {
	if m != nil {
		return m.ParentTxId
	}
	return ""
}

func (m *GrpcTxEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GrpcTxEvent) GetCompensationMethod() string {
	if m != nil {
		return m.CompensationMethod
	}
	return ""
}

func (m *GrpcTxEvent) GetPayloads() []byte {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func (m *GrpcTxEvent) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *GrpcTxEvent) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *GrpcTxEvent) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GrpcTxEvent) GetForwardTimeout() int32 {
	if m != nil {
		return m.ForwardTimeout
	}
	return 0
}

func (m *GrpcTxEvent) GetForwardRetries() int32 {
	if m != nil {
		return m.ForwardRetries
	}
	return 0
}

func (m *GrpcTxEvent) GetReverseRetries() int32 {
	if m != nil {
		return m.ReverseRetries
	}
	return 0
}

func (m *GrpcTxEvent) GetReverseTimeout() int32 {
	if m != nil {
		return m.ReverseTimeout
	}
	return 0
}

func (m *GrpcTxEvent) GetRetryDelayInMilliseconds() int32 {
	if m != nil {
		return m.RetryDelayInMilliseconds
	}
	return 0
}

func (m *GrpcTxEvent) GetRetryMethod() string {
	if m != nil {
		return m.RetryMethod
	}
	return ""
}

type GrpcCompensateCommand struct {
	GlobalTxId           string   `protobuf:"bytes,1,opt,name=globalTxId,proto3" json:"globalTxId,omitempty"`
	LocalTxId            string   `protobuf:"bytes,2,opt,name=localTxId,proto3" json:"localTxId,omitempty"`
	ParentTxId           string   `protobuf:"bytes,3,opt,name=parentTxId,proto3" json:"parentTxId,omitempty"`
	CompensationMethod   string   `protobuf:"bytes,4,opt,name=compensationMethod,proto3" json:"compensationMethod,omitempty"`
	Payloads             []byte   `protobuf:"bytes,5,opt,name=payloads,proto3" json:"payloads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcCompensateCommand) Reset()         { *m = GrpcCompensateCommand{} }
func (m *GrpcCompensateCommand) String() string { return proto.CompactTextString(m) }
func (*GrpcCompensateCommand) ProtoMessage()    {}
func (*GrpcCompensateCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_a03169feeaf20564, []int{1}
}
func (m *GrpcCompensateCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrpcCompensateCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrpcCompensateCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrpcCompensateCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcCompensateCommand.Merge(m, src)
}
func (m *GrpcCompensateCommand) XXX_Size() int {
	return m.Size()
}
func (m *GrpcCompensateCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcCompensateCommand.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcCompensateCommand proto.InternalMessageInfo

func (m *GrpcCompensateCommand) GetGlobalTxId() string {
	if m != nil {
		return m.GlobalTxId
	}
	return ""
}

func (m *GrpcCompensateCommand) GetLocalTxId() string {
	if m != nil {
		return m.LocalTxId
	}
	return ""
}

func (m *GrpcCompensateCommand) GetParentTxId() string {
	if m != nil {
		return m.ParentTxId
	}
	return ""
}

func (m *GrpcCompensateCommand) GetCompensationMethod() string {
	if m != nil {
		return m.CompensationMethod
	}
	return ""
}

func (m *GrpcCompensateCommand) GetPayloads() []byte {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func init() {
	proto.RegisterType((*GrpcTxEvent)(nil), "GrpcTxEvent")
	proto.RegisterType((*GrpcCompensateCommand)(nil), "GrpcCompensateCommand")
}

func init() { proto.RegisterFile("GrpcTxEvent.proto", fileDescriptor_a03169feeaf20564) }

var fileDescriptor_a03169feeaf20564 = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdf, 0x6e, 0x12, 0x4d,
	0x14, 0x67, 0x0a, 0xb4, 0x70, 0xe0, 0xa3, 0xfd, 0x26, 0xd1, 0x4c, 0x88, 0x21, 0x84, 0x44, 0x83,
	0x37, 0x93, 0x46, 0xbd, 0xd2, 0x0b, 0x63, 0xa9, 0x69, 0xb8, 0x40, 0x1a, 0x24, 0x31, 0xf1, 0x6e,
	0x98, 0x3d, 0xa5, 0x9b, 0xee, 0xce, 0x6c, 0x66, 0x47, 0x2c, 0x6f, 0xe2, 0xeb, 0x18, 0x6f, 0xbc,
	0xf4, 0x11, 0x1a, 0x7c, 0x11, 0x33, 0xb3, 0x8b, 0x2c, 0x15, 0x89, 0x77, 0xcc, 0xef, 0x0f, 0xe7,
	0xcc, 0xd9, 0xdf, 0x19, 0xf8, 0xff, 0xc2, 0x24, 0x72, 0x7a, 0xfb, 0x76, 0x81, 0xca, 0xf2, 0xc4,
	0x68, 0xab, 0xdb, 0x27, 0x0e, 0x1a, 0xe8, 0x38, 0xd6, 0x2a, 0x43, 0x7a, 0xdf, 0x2a, 0xd0, 0x28,
	0xe8, 0xe8, 0x23, 0xa8, 0xdb, 0x30, 0xc6, 0xd4, 0x8a, 0x38, 0x61, 0xa4, 0x4b, 0xfa, 0xe5, 0xc9,
	0x06, 0xa0, 0x1d, 0x80, 0x79, 0xa4, 0x67, 0x22, 0x9a, 0xde, 0x0e, 0x03, 0x76, 0xd0, 0x25, 0xfd,
	0xfa, 0xa4, 0x80, 0x38, 0x77, 0xa4, 0x65, 0x4e, 0x97, 0x3d, 0xbd, 0x01, 0x9c, 0x3b, 0x11, 0x06,
	0x95, 0xf5, 0x74, 0x25, 0x73, 0x6f, 0x10, 0x4a, 0xa1, 0x62, 0x97, 0x09, 0xb2, 0xaa, 0x67, 0xfc,
	0x6f, 0xca, 0x81, 0x4a, 0x1d, 0x27, 0xa8, 0x52, 0x61, 0x43, 0xad, 0x46, 0x68, 0xaf, 0x75, 0xc0,
	0x0e, 0xbd, 0x62, 0x07, 0x43, 0xdb, 0x50, 0x4b, 0xc4, 0x32, 0xd2, 0x22, 0x48, 0xd9, 0x51, 0x97,
	0xf4, 0x9b, 0x93, 0xdf, 0x67, 0xda, 0x85, 0x46, 0x8a, 0x66, 0x11, 0x4a, 0x7c, 0x27, 0x62, 0x64,
	0x35, 0xff, 0x27, 0x45, 0xc8, 0x75, 0x18, 0xaa, 0xd4, 0x0a, 0x25, 0x71, 0x18, 0xb0, 0x7a, 0xd6,
	0xe1, 0x06, 0xa1, 0x0c, 0x8e, 0xdc, 0x30, 0xf4, 0x27, 0xcb, 0xa0, 0x4b, 0xfa, 0xd5, 0xc9, 0xfa,
	0x48, 0x9f, 0x40, 0xeb, 0x4a, 0x9b, 0xcf, 0xc2, 0x04, 0xd3, 0x5c, 0xd0, 0xf0, 0x82, 0x7b, 0x68,
	0x41, 0x37, 0x41, 0x6b, 0x42, 0x4c, 0x59, 0x73, 0x4b, 0x97, 0xa3, 0x4e, 0x67, 0x70, 0x81, 0x26,
	0xc5, 0xb5, 0xee, 0xbf, 0x4c, 0xb7, 0x8d, 0x16, 0x74, 0xeb, 0xba, 0xad, 0x2d, 0xdd, 0xba, 0xee,
	0x4b, 0x60, 0x06, 0xad, 0x59, 0x9e, 0x63, 0x24, 0x96, 0x43, 0x35, 0x0a, 0xa3, 0x28, 0x4c, 0x51,
	0x6a, 0x15, 0xa4, 0xec, 0xd8, 0x3b, 0xfe, 0xca, 0xbb, 0xb9, 0x79, 0x2e, 0x1f, 0xfe, 0x49, 0x36,
	0xb7, 0x02, 0xd4, 0xfb, 0x4a, 0xe0, 0x41, 0x1e, 0xad, 0xec, 0x83, 0xa0, 0x0b, 0x99, 0x50, 0xc1,
	0xbd, 0xc4, 0x90, 0xfd, 0x89, 0x39, 0xd8, 0x9f, 0x98, 0xf2, 0x1f, 0x89, 0xd9, 0x9d, 0x8e, 0xca,
	0x3f, 0xa5, 0xa3, 0xba, 0x9d, 0x8e, 0x67, 0x77, 0x04, 0x5a, 0xf9, 0x16, 0xbc, 0xcf, 0x22, 0x41,
	0x5f, 0x43, 0x63, 0xac, 0x06, 0x5a, 0x29, 0x94, 0x16, 0x03, 0x4a, 0xb9, 0xbb, 0x63, 0x4e, 0x0e,
	0xb4, 0xba, 0x0a, 0xe7, 0xed, 0x87, 0x7c, 0xe7, 0xbd, 0x7b, 0xa5, 0x3e, 0x39, 0x25, 0xf4, 0x31,
	0xd4, 0xc7, 0x6a, 0xbd, 0x5a, 0x4d, 0x5e, 0x58, 0xb4, 0x76, 0xcd, 0x9f, 0xde, 0xc8, 0x9b, 0x5e,
	0x89, 0x9e, 0x42, 0x6b, 0xac, 0xce, 0xc3, 0x54, 0xee, 0x2d, 0x55, 0x74, 0xbc, 0x80, 0x63, 0xad,
	0x2e, 0xd0, 0x77, 0x8a, 0x66, 0x84, 0x56, 0xec, 0xb4, 0x34, 0xf8, 0x46, 0xd0, 0x2b, 0x9d, 0x7d,
	0xf8, 0xbe, 0xea, 0x90, 0x1f, 0xab, 0x0e, 0xb9, 0x5b, 0x75, 0xc8, 0x97, 0x9f, 0x9d, 0x12, 0x3c,
	0xd5, 0x66, 0xce, 0x45, 0x22, 0xe4, 0x35, 0xf2, 0x7c, 0x11, 0xa4, 0x8e, 0x67, 0x3c, 0x11, 0xf2,
	0x86, 0x4b, 0xad, 0xac, 0x11, 0xd2, 0xf2, 0xb9, 0x49, 0xe4, 0x59, 0x33, 0xef, 0xfc, 0xd2, 0xbd,
	0x1b, 0x97, 0xe4, 0x23, 0xf0, 0x57, 0xa9, 0x98, 0x0b, 0xc7, 0xcd, 0x0e, 0xfd, 0x63, 0xf2, 0xfc,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x84, 0xbc, 0xcf, 0x73, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TxEventServiceClient is the client API for TxEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TxEventServiceClient interface {
	OnConnected(ctx context.Context, opts ...grpc.CallOption) (TxEventService_OnConnectedClient, error)
	OnTxEvent(ctx context.Context, in *GrpcTxEvent, opts ...grpc.CallOption) (*GrpcAck, error)
	OnDisconnected(ctx context.Context, in *GrpcServiceConfig, opts ...grpc.CallOption) (*GrpcAck, error)
	OnGetServerMeta(ctx context.Context, in *GrpcServiceConfig, opts ...grpc.CallOption) (*ServerMeta, error)
}

type txEventServiceClient struct {
	cc *grpc.ClientConn
}

func NewTxEventServiceClient(cc *grpc.ClientConn) TxEventServiceClient {
	return &txEventServiceClient{cc}
}

func (c *txEventServiceClient) OnConnected(ctx context.Context, opts ...grpc.CallOption) (TxEventService_OnConnectedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TxEventService_serviceDesc.Streams[0], "/TxEventService/OnConnected", opts...)
	if err != nil {
		return nil, err
	}
	x := &txEventServiceOnConnectedClient{stream}
	return x, nil
}

type TxEventService_OnConnectedClient interface {
	Send(*GrpcServiceConfig) error
	Recv() (*GrpcCompensateCommand, error)
	grpc.ClientStream
}

type txEventServiceOnConnectedClient struct {
	grpc.ClientStream
}

func (x *txEventServiceOnConnectedClient) Send(m *GrpcServiceConfig) error {
	return x.ClientStream.SendMsg(m)
}

func (x *txEventServiceOnConnectedClient) Recv() (*GrpcCompensateCommand, error) {
	m := new(GrpcCompensateCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *txEventServiceClient) OnTxEvent(ctx context.Context, in *GrpcTxEvent, opts ...grpc.CallOption) (*GrpcAck, error) {
	out := new(GrpcAck)
	err := c.cc.Invoke(ctx, "/TxEventService/OnTxEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txEventServiceClient) OnDisconnected(ctx context.Context, in *GrpcServiceConfig, opts ...grpc.CallOption) (*GrpcAck, error) {
	out := new(GrpcAck)
	err := c.cc.Invoke(ctx, "/TxEventService/OnDisconnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txEventServiceClient) OnGetServerMeta(ctx context.Context, in *GrpcServiceConfig, opts ...grpc.CallOption) (*ServerMeta, error) {
	out := new(ServerMeta)
	err := c.cc.Invoke(ctx, "/TxEventService/onGetServerMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxEventServiceServer is the server API for TxEventService service.
type TxEventServiceServer interface {
	OnConnected(TxEventService_OnConnectedServer) error
	OnTxEvent(context.Context, *GrpcTxEvent) (*GrpcAck, error)
	OnDisconnected(context.Context, *GrpcServiceConfig) (*GrpcAck, error)
	OnGetServerMeta(context.Context, *GrpcServiceConfig) (*ServerMeta, error)
}

// UnimplementedTxEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTxEventServiceServer struct {
}

func (*UnimplementedTxEventServiceServer) OnConnected(srv TxEventService_OnConnectedServer) error {
	return status.Errorf(codes.Unimplemented, "method OnConnected not implemented")
}
func (*UnimplementedTxEventServiceServer) OnTxEvent(ctx context.Context, req *GrpcTxEvent) (*GrpcAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTxEvent not implemented")
}
func (*UnimplementedTxEventServiceServer) OnDisconnected(ctx context.Context, req *GrpcServiceConfig) (*GrpcAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnDisconnected not implemented")
}
func (*UnimplementedTxEventServiceServer) OnGetServerMeta(ctx context.Context, req *GrpcServiceConfig) (*ServerMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetServerMeta not implemented")
}

func RegisterTxEventServiceServer(s *grpc.Server, srv TxEventServiceServer) {
	s.RegisterService(&_TxEventService_serviceDesc, srv)
}

func _TxEventService_OnConnected_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TxEventServiceServer).OnConnected(&txEventServiceOnConnectedServer{stream})
}

type TxEventService_OnConnectedServer interface {
	Send(*GrpcCompensateCommand) error
	Recv() (*GrpcServiceConfig, error)
	grpc.ServerStream
}

type txEventServiceOnConnectedServer struct {
	grpc.ServerStream
}

func (x *txEventServiceOnConnectedServer) Send(m *GrpcCompensateCommand) error {
	return x.ServerStream.SendMsg(m)
}

func (x *txEventServiceOnConnectedServer) Recv() (*GrpcServiceConfig, error) {
	m := new(GrpcServiceConfig)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TxEventService_OnTxEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcTxEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxEventServiceServer).OnTxEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TxEventService/OnTxEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxEventServiceServer).OnTxEvent(ctx, req.(*GrpcTxEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxEventService_OnDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcServiceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxEventServiceServer).OnDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TxEventService/OnDisconnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxEventServiceServer).OnDisconnected(ctx, req.(*GrpcServiceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxEventService_OnGetServerMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcServiceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxEventServiceServer).OnGetServerMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TxEventService/OnGetServerMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxEventServiceServer).OnGetServerMeta(ctx, req.(*GrpcServiceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _TxEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TxEventService",
	HandlerType: (*TxEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnTxEvent",
			Handler:    _TxEventService_OnTxEvent_Handler,
		},
		{
			MethodName: "OnDisconnected",
			Handler:    _TxEventService_OnDisconnected_Handler,
		},
		{
			MethodName: "onGetServerMeta",
			Handler:    _TxEventService_OnGetServerMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnConnected",
			Handler:       _TxEventService_OnConnected_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "GrpcTxEvent.proto",
}

func (m *GrpcTxEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrpcTxEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrpcTxEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RetryMethod) > 0 {
		i -= len(m.RetryMethod)
		copy(dAtA[i:], m.RetryMethod)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.RetryMethod)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.RetryDelayInMilliseconds != 0 {
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(m.RetryDelayInMilliseconds))
		i--
		dAtA[i] = 0x78
	}
	if m.ReverseTimeout != 0 {
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(m.ReverseTimeout))
		i--
		dAtA[i] = 0x70
	}
	if m.ReverseRetries != 0 {
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(m.ReverseRetries))
		i--
		dAtA[i] = 0x68
	}
	if m.ForwardRetries != 0 {
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(m.ForwardRetries))
		i--
		dAtA[i] = 0x60
	}
	if m.ForwardTimeout != 0 {
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(m.ForwardTimeout))
		i--
		dAtA[i] = 0x58
	}
	if m.Timeout != 0 {
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InstanceId) > 0 {
		i -= len(m.InstanceId)
		copy(dAtA[i:], m.InstanceId)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.InstanceId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Payloads) > 0 {
		i -= len(m.Payloads)
		copy(dAtA[i:], m.Payloads)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.Payloads)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CompensationMethod) > 0 {
		i -= len(m.CompensationMethod)
		copy(dAtA[i:], m.CompensationMethod)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.CompensationMethod)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ParentTxId) > 0 {
		i -= len(m.ParentTxId)
		copy(dAtA[i:], m.ParentTxId)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.ParentTxId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LocalTxId) > 0 {
		i -= len(m.LocalTxId)
		copy(dAtA[i:], m.LocalTxId)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.LocalTxId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GlobalTxId) > 0 {
		i -= len(m.GlobalTxId)
		copy(dAtA[i:], m.GlobalTxId)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.GlobalTxId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GrpcCompensateCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrpcCompensateCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrpcCompensateCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payloads) > 0 {
		i -= len(m.Payloads)
		copy(dAtA[i:], m.Payloads)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.Payloads)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CompensationMethod) > 0 {
		i -= len(m.CompensationMethod)
		copy(dAtA[i:], m.CompensationMethod)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.CompensationMethod)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentTxId) > 0 {
		i -= len(m.ParentTxId)
		copy(dAtA[i:], m.ParentTxId)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.ParentTxId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LocalTxId) > 0 {
		i -= len(m.LocalTxId)
		copy(dAtA[i:], m.LocalTxId)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.LocalTxId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GlobalTxId) > 0 {
		i -= len(m.GlobalTxId)
		copy(dAtA[i:], m.GlobalTxId)
		i = encodeVarintGrpcTxEvent(dAtA, i, uint64(len(m.GlobalTxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGrpcTxEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrpcTxEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GrpcTxEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGrpcTxEvent(uint64(m.Timestamp))
	}
	l = len(m.GlobalTxId)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.LocalTxId)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.ParentTxId)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.CompensationMethod)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.Payloads)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.InstanceId)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovGrpcTxEvent(uint64(m.Timeout))
	}
	if m.ForwardTimeout != 0 {
		n += 1 + sovGrpcTxEvent(uint64(m.ForwardTimeout))
	}
	if m.ForwardRetries != 0 {
		n += 1 + sovGrpcTxEvent(uint64(m.ForwardRetries))
	}
	if m.ReverseRetries != 0 {
		n += 1 + sovGrpcTxEvent(uint64(m.ReverseRetries))
	}
	if m.ReverseTimeout != 0 {
		n += 1 + sovGrpcTxEvent(uint64(m.ReverseTimeout))
	}
	if m.RetryDelayInMilliseconds != 0 {
		n += 1 + sovGrpcTxEvent(uint64(m.RetryDelayInMilliseconds))
	}
	l = len(m.RetryMethod)
	if l > 0 {
		n += 2 + l + sovGrpcTxEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GrpcCompensateCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GlobalTxId)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.LocalTxId)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.ParentTxId)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.CompensationMethod)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	l = len(m.Payloads)
	if l > 0 {
		n += 1 + l + sovGrpcTxEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGrpcTxEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrpcTxEvent(x uint64) (n int) {
	return sovGrpcTxEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GrpcTxEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcTxEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrpcTxEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrpcTxEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompensationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompensationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads[:0], dAtA[iNdEx:postIndex]...)
			if m.Payloads == nil {
				m.Payloads = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardTimeout", wireType)
			}
			m.ForwardTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwardTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardRetries", wireType)
			}
			m.ForwardRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwardRetries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReverseRetries", wireType)
			}
			m.ReverseRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReverseRetries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReverseTimeout", wireType)
			}
			m.ReverseTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReverseTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryDelayInMilliseconds", wireType)
			}
			m.RetryDelayInMilliseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryDelayInMilliseconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetryMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcTxEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrpcCompensateCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcTxEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrpcCompensateCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrpcCompensateCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompensationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompensationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads[:0], dAtA[iNdEx:postIndex]...)
			if m.Payloads == nil {
				m.Payloads = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcTxEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpcTxEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpcTxEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpcTxEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpcTxEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrpcTxEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGrpcTxEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGrpcTxEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGrpcTxEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpcTxEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGrpcTxEvent = fmt.Errorf("proto: unexpected end of group")
)
